
B.(b) Programmer funksjon tokenize :: String -> String -> String -> [String]. 
Et kall 
> tokenize str imp rem
skal dele opp strengen str i en liste av strenger, der 
- hvert tegn som forekommer i strengen imp skal stå som egen streng, 
- hvert tegn som forekommer i strengen rem skal fjernes, mens 
- tegn fra imp ++ rem brukes som skilletegn, dvs. andre delstrenger av str i resultatlisten er 
de som forekommer mellom tegn fra imp ++ rem.
Vi antar at ingen tegn forekommer i begge argumentlister imp og rem. 
F.eks.:
> tokenize “aa b -c”   “”   “ ”  (den siste er strengen med enkelt blank, og nest siste en tom streng) skal gi
[“aa”, ”b”, ”-c”]
> tokenize “aa b -c”   “-”   “ ”   (den siste er strengen med enkelt blank) skal gi 
[“aa”, ”b”, ”-“, “c”]
> tokenize “a + b* 12–def”   “+*–”   “ “ (den siste er strengen med enkelt blank) skal gi 
[“a”, ”+”, ”b”, ”*”, ”12”, “–“, “def”]
> tokenize “a + b* 12–def”   “+*”   “ “ (den siste er strengen med enkelt blank) skal gi 
[“a”, ”+”, ”b”, ”*”, ”12–def”]

D. Programmer funksjon 
   sjekk :: String -> String
som tar som input en streng med mulige parantesuttrykk, og sjekker om paranteser er riktig. 
Er de det, returneres strengen “Korrekt”, mens er det feil, returneres strengen “Feil”. 
Du kan først lage en løsning hvor kun paranteser ( og ) kan forekomme og, deretter, 
utvide den med parantespar [ ] og { }. 
Paranteser må matches kun mot paranteser med samme type. F.eks.,
 skal strengen “( { ) }” avvises, fordi innerste “{“ har tilsvarende “)” istedenfor "}".
  Utenom paranteser, kan man ha vilkårlige tegn i strenger, f.eks. skal “abc( de { a} jjjj) [x]” aksepteres.
